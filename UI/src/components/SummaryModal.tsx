import React, { useState } from 'react';
import { X, Mail, MessageCircle, Download, Send, MoreHorizontal, Copy, Check } from 'lucide-react';

interface SummaryModalProps {
  isOpen: boolean;
  onClose: () => void;
  summary: string;
  meetingTitle: string;
}

export const SummaryModal: React.FC<SummaryModalProps> = ({ 
  isOpen, 
  onClose, 
  summary, 
  meetingTitle 
}) => {
  const [copied, setCopied] = useState(false);

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(summary);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  const handleShare = (platform: string) => {
    const encodedSummary = encodeURIComponent(summary);
    const encodedTitle = encodeURIComponent(`Meeting Summary: ${meetingTitle}`);
    
    switch (platform) {
      case 'gmail':
        window.open(`mailto:?subject=${encodedTitle}&body=${encodedSummary}`, '_blank');
        break;
      case 'whatsapp':
        window.open(`https://wa.me/?text=${encodedTitle}%0A%0A${encodedSummary}`, '_blank');
        break;
      case 'slack':
        // In a real app, this would integrate with Slack API
        alert('Slack integration would be implemented here');
        break;
      case 'pdf':
        // In a real app, this would generate and download a PDF
        alert('PDF generation would be implemented here');
        break;
      default:
        handleCopy();
    }
  };

  if (!isOpen) return null;

  const sharingOptions = [
    { id: 'gmail', label: 'Gmail', icon: Mail, color: 'bg-red-500 hover:bg-red-600' },
    { id: 'whatsapp', label: 'WhatsApp', icon: MessageCircle, color: 'bg-green-500 hover:bg-green-600' },
    { id: 'pdf', label: 'PDF', icon: Download, color: 'bg-blue-500 hover:bg-blue-600' },
    { id: 'slack', label: 'Slack', icon: Send, color: 'bg-purple-500 hover:bg-purple-600' },
    { id: 'more', label: 'Copy', icon: copied ? Check : Copy, color: 'bg-gray-500 hover:bg-gray-600' }
  ];

  return (
    <div className="fixed inset-0 bg-black/60 backdrop-blur-md flex items-center justify-center z-50 p-4 animate-fadeIn">
      <div className="bg-white rounded-3xl shadow-2xl max-w-4xl w-full mx-4 relative overflow-hidden max-h-[90vh] flex flex-col animate-slideUp">
        {/* Header */}
        <div className="relative bg-gradient-to-r from-blue-600 to-indigo-600 p-6 text-white">
          <button
            onClick={onClose}
            className="absolute top-4 right-4 p-2 text-white/80 hover:text-white transition-colors duration-200 hover:rotate-90 transform"
          >
            <X className="w-6 h-6" />
          </button>
          
          <div className="pr-12">
            <h2 className="text-2xl font-bold mb-2">Meeting Summary</h2>
            <p className="text-blue-100 text-sm">{meetingTitle}</p>
          </div>
        </div>

        {/* Summary Content */}
        <div className="flex-1 p-6 overflow-hidden flex flex-col">
          <div className="flex-1 bg-gray-50 rounded-2xl p-6 overflow-y-auto mb-6">
            <pre className="whitespace-pre-wrap text-gray-800 text-sm leading-relaxed font-sans">
              {summary}
            </pre>
          </div>

          {/* Sharing Options */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-800 text-center">Share Summary</h3>
            
            <div className="grid grid-cols-5 gap-4">
              {sharingOptions.map((option) => (
                <button
                  key={option.id}
                  onClick={() => handleShare(option.id)}
                  className={`group flex flex-col items-center space-y-2 p-4 rounded-2xl text-white transition-all duration-300 hover:scale-105 hover:shadow-lg ${option.color}`}
                >
                  <option.icon className="w-6 h-6 group-hover:scale-110 transition-transform duration-200" />
                  <span className="text-xs font-medium">{option.label}</span>
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="p-4 bg-gray-50 border-t border-gray-200">
          <p className="text-xs text-gray-500 text-center">
            Summary generated by MeetGenAI â€¢ {new Date().toLocaleString()}
          </p>
        </div>
      </div>
    </div>
  );
};